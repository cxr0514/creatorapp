generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  email         String    @unique
  password      String?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  clips         Clip[]
  sessions      Session[]
  videos        Video[]
  styleTemplates StyleTemplate[]
  socialAccounts SocialAccount[]
  scheduledPosts ScheduledPost[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id            Int      @id @default(autoincrement())
  title         String
  uploadedAt    DateTime @default(now())
  userId        String
  cloudinaryId  String
  cloudinaryUrl String
  duration      Int?
  fileSize      Int?
  thumbnailUrl  String?
  clips         Clip[]
  user          User     @relation(fields: [userId], references: [id])
}

model Clip {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  hashtags      String[] @default([])
  tags          String[] @default([])
  createdAt     DateTime @default(now())
  userId        String
  videoId       Int
  cloudinaryId  String
  cloudinaryUrl String
  startTime     Int?     // Start time in seconds
  endTime       Int?     // End time in seconds
  duration      Int?     // Calculated duration in seconds
  aspectRatio   String   @default("16:9") // "16:9", "9:16", "1:1", "4:3"
  thumbnailUrl  String?
  status        String   @default("draft") // "draft", "processing", "ready", "failed"
  processingProgress Int? @default(0) // 0-100 for processing status
  metadata      Json?    // Additional metadata like AI suggestions
  user          User     @relation(fields: [userId], references: [id])
  video         Video    @relation(fields: [videoId], references: [id])
  exports       ClipExport[]
  scheduledPosts ScheduledPost[]
}

model ClipExport {
  id            Int      @id @default(autoincrement())
  clipId        Int
  format        String   // "9:16", "1:1", "16:9", "4:3"
  platform      String   // "tiktok", "instagram", "youtube", "twitter", "linkedin"
  cloudinaryId  String
  cloudinaryUrl String
  croppingType  String   @default("center") // "center", "face", "action", "smart"
  thumbnailUrl  String?
  createdAt     DateTime @default(now())
  fileSize      Int?
  clip          Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)
  
  @@unique([clipId, format, platform])
}

model StyleTemplate {
  id              String  @id @default(cuid())
  name            String
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  fontFamily      String? // e.g., "Arial", "Verdana"
  primaryColor    String? // Hex color, e.g., "#FF0000"
  secondaryColor  String? // Hex color
  backgroundColor String? // Hex color for text backgrounds or overlays

  // Cloudinary public IDs for video/image assets
  introCloudinaryId   String? 
  outroCloudinaryId   String?
  logoCloudinaryId    String? // For a watermark/logo overlay

  // Configuration for text overlays (lower thirds, CTAs)
  lowerThirdText      String?
  lowerThirdPosition  String? // e.g., "bottom_left", "bottom_right"

  callToActionText    String?
  callToActionUrl     String?
  callToActionPosition String? // e.g., "top_right"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model SocialAccount {
  id                String  @id @default(cuid())
  userId            String
  platform          String  // "youtube", "tiktok", "instagram", "twitter", "linkedin"
  platformUserId    String  // The user's ID on the platform
  platformUsername  String? // The user's username/handle on the platform
  displayName       String? // The user's display name on the platform
  accessToken       String? // Encrypted access token
  refreshToken      String? // Encrypted refresh token (if applicable)
  tokenExpiresAt    DateTime? // When the access token expires
  isActive          Boolean @default(true)
  permissions       String[] @default([]) // Array of granted permissions
  metadata          Json?   // Platform-specific metadata
  connectedAt       DateTime @default(now())
  lastUsedAt        DateTime?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId])
  @@index([platform])
}

model ScheduledPost {
  id              String    @id @default(cuid())
  userId          String
  clipId          Int?      // Optional - can schedule posts without clips
  title           String
  description     String?
  hashtags        String[]  @default([])
  platform        String    // "youtube", "tiktok", "instagram", "twitter", "linkedin"
  scheduledFor    DateTime  // When to publish
  status          String    @default("scheduled") // "scheduled", "publishing", "published", "failed", "cancelled"
  publishedAt     DateTime? // When it was actually published
  platformPostId  String?   // ID of the post on the platform after publishing
  platformUrl     String?   // URL to the published post
  errorMessage    String?   // Error message if publishing failed
  retryCount      Int       @default(0)
  maxRetries      Int       @default(3)
  
  // Platform-specific settings
  platformSettings Json?    // Platform-specific options (visibility, comments, etc.)
  
  // Content variations for different platforms
  content         Json?     // Platform-specific content variations
  
  // Workflow automation
  workflowId      String?   // For batch/automated posting workflows
  parentPostId    String?   // For cross-posting chains
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clip            Clip?     @relation(fields: [clipId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([platform])
  @@index([workflowId])
}

// Optional: If users can upload multiple, arbitrary overlay assets per template
// model TemplateOverlayAsset {
//   id                String @id @default(cuid())
//   styleTemplateId   String
//   styleTemplate     StyleTemplate @relation(fields: [styleTemplateId], references: [id], onDelete: Cascade)
//   cloudinaryId      String // Cloudinary public ID of the uploaded image/asset
//   assetType         String // e.g., 'logo', 'watermark', 'banner', 'custom_graphic'
//   position          String? // e.g., 'top_left', 'center', 'stretch_fill'
//   xOffset           Int?    // For precise positioning
//   yOffset           Int?    // For precise positioning
//   opacity           Float?  // 0.0 to 1.0
//   createdAt         DateTime @default(now())

//   @@index([styleTemplateId])
// }

// Add relation to Clip if a clip can have a default template, or to Video
// This is not explicitly in PRD 3.4 but could be an extension.
// For now, templates are applied at export time.
