generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                @id @default(cuid())
  username                 String?               @unique
  email                    String                @unique
  password                 String?
  createdAt                DateTime              @default(now())
  emailVerified            DateTime?
  image                    String?
  name                     String?
  accountStatus            String                @default("active")
  isActive                 Boolean               @default(true)
  lastLoginAt              DateTime?
  suspendedAt              DateTime?
  suspendedBy              String?
  suspensionReason         String?
  totalStorage             Int                   @default(0)
  usageStats               Json?
  stripeCustomerId         String?               @unique
  accounts                 Account[]
  adminProfile             Admin?
  clips                    Clip[]
  paymentHistory           PaymentHistory[]
  scheduledPosts           ScheduledPost[]
  sessions                 Session[]
  socialAccounts           SocialAccount[]
  styleTemplates           StyleTemplate[]
  subscription             Subscription?
  supportTickets           SupportTicket[]
  feedbacks                UserFeedback[]
  userOnboarding           UserOnboarding?
  userPreferences          UserPreferences?
  videos                   Video[]
  ownedWorkspaces          Workspace[]
  workspaceInvitationsSent WorkspaceInvitation[]
  workspaceMemberships     WorkspaceMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id           Int      @id @default(autoincrement())
  title        String
  uploadedAt   DateTime @default(now())
  userId       String
  storageKey   String
  storageUrl   String
  duration     Int?
  fileSize     Int?
  thumbnailUrl String?
  clips        Clip[]
  user         User     @relation(fields: [userId], references: [id])
}

model Clip {
  id                 Int             @id @default(autoincrement())
  title              String
  description        String?
  hashtags           String[]        @default([])
  tags               String[]        @default([])
  createdAt          DateTime        @default(now())
  userId             String
  videoId            Int
  storageKey         String
  storageUrl         String
  startTime          Int?
  endTime            Int?
  duration           Int?
  aspectRatio        String          @default("16:9")
  thumbnailUrl       String?
  status             String          @default("draft")
  processingProgress Int?            @default(0)
  metadata           Json?
  user               User            @relation(fields: [userId], references: [id])
  video              Video           @relation(fields: [videoId], references: [id])
  exports            ClipExport[]
  scheduledPosts     ScheduledPost[]
}

model ClipExport {
  id            Int      @id @default(autoincrement())
  clipId        Int
  format        String
  platform      String
  storageKey    String
  storageUrl    String
  croppingType  String   @default("center")
  thumbnailUrl  String?
  createdAt     DateTime @default(now())
  fileSize      Int?
  clip          Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)

  @@unique([clipId, format, platform])
}

model StyleTemplate {
  id                   String   @id @default(cuid())
  name                 String
  userId               String
  fontFamily           String?
  primaryColor         String?
  secondaryColor       String?
  backgroundColor      String?
  introStorageKey      String?
  outroStorageKey      String?
  logoStorageKey       String?
  lowerThirdText       String?
  lowerThirdPosition   String?
  callToActionText     String?
  callToActionUrl      String?
  callToActionPosition String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SocialAccount {
  id               String    @id @default(cuid())
  userId           String
  platform         String
  platformUserId   String
  platformUsername String?
  displayName      String?
  accessToken      String?
  refreshToken     String?
  tokenExpiresAt   DateTime?
  isActive         Boolean   @default(true)
  permissions      String[]  @default([])
  metadata         Json?
  connectedAt      DateTime  @default(now())
  lastUsedAt       DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId])
  @@index([platform])
}

model ScheduledPost {
  id               String    @id @default(cuid())
  userId           String
  clipId           Int?
  title            String
  description      String?
  hashtags         String[]  @default([])
  platform         String
  scheduledFor     DateTime
  status           String    @default("scheduled")
  publishedAt      DateTime?
  platformPostId   String?
  platformUrl      String?
  errorMessage     String?
  retryCount       Int       @default(0)
  maxRetries       Int       @default(3)
  platformSettings Json?
  content          Json?
  workflowId       String?
  parentPostId     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  clip             Clip?     @relation(fields: [clipId], references: [id])
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([platform])
  @@index([workflowId])
}

model UserPreferences {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  defaultAspectRatio     String   @default("16:9")
  primaryPlatform        String?
  targetPlatforms        String[] @default([])
  enableAiEnhancement    Boolean  @default(true)
  autoGenerateCaptions   Boolean  @default(true)
  autoGenerateHashtags   Boolean  @default(true)
  aiTonePreference       String   @default("professional")
  customPrompts          Json?
  videoQuality           String   @default("1080p")
  audioQuality           String   @default("high")
  compressionLevel       String   @default("balanced")
  defaultScheduleTime    String?
  timezone               String   @default("UTC")
  enableAutoPosting      Boolean  @default(false)
  crossPostingEnabled    Boolean  @default(false)
  batchProcessingEnabled Boolean  @default(true)
  defaultHashtagCount    Int      @default(5)
  defaultCaptionLength   String   @default("medium")
  enableTrendingHashtags Boolean  @default(true)
  emailNotifications     Boolean  @default(true)
  pushNotifications      Boolean  @default(true)
  weeklyDigest           Boolean  @default(true)
  processingAlerts       Boolean  @default(true)
  schedulingReminders    Boolean  @default(true)
  theme                  String   @default("basecom")
  dashboardLayout        String   @default("grid")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserOnboarding {
  id                   String    @id @default(cuid())
  userId               String    @unique
  isCompleted          Boolean   @default(false)
  currentStep          Int       @default(1)
  totalSteps           Int       @default(5)
  welcomeCompleted     Boolean   @default(false)
  goalsCompleted       Boolean   @default(false)
  platformsCompleted   Boolean   @default(false)
  preferencesCompleted Boolean   @default(false)
  tutorialCompleted    Boolean   @default(false)
  contentGoals         String[]  @default([])
  experienceLevel      String?
  contentTypes         String[]  @default([])
  postingFrequency     String?
  priorityPlatforms    String[]  @default([])
  audienceSize         String?
  interestedFeatures   String[]  @default([])
  skipTutorial         Boolean   @default(false)
  completedAt          DateTime?
  timeSpent            Int?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isCompleted])
}

model Admin {
  id                     String          @id @default(cuid())
  userId                 String          @unique
  role                   String          @default("admin")
  permissions            String[]        @default([])
  canImpersonate         Boolean         @default(false)
  canDeleteUsers         Boolean         @default(false)
  canManageRoles         Boolean         @default(false)
  canAccessLogs          Boolean         @default(true)
  createdAt              DateTime        @default(now())
  createdBy              String?
  lastActiveAt           DateTime?
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLogs              AuditLog[]
  supportTicketsAssigned SupportTicket[] @relation("AssignedAdmin")

  @@index([userId])
  @@index([role])
}

model AuditLog {
  id           String   @id @default(cuid())
  adminId      String?
  action       String
  targetType   String
  targetId     String
  targetUserId String?
  details      Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  admin        Admin?   @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([targetType])
  @@index([targetUserId])
  @@index([createdAt])
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String           @unique
  planId               String
  status               String           @default("active")
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean          @default(false)
  cancelledAt          DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  usageThisMonth       Json?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@index([status])
}

model SubscriptionPlan {
  id                 String         @id @default(cuid())
  name               String         @unique
  displayName        String
  description        String?
  priceMonthly       Decimal
  priceYearly        Decimal?
  currency           String         @default("USD")
  maxVideos          Int            @default(-1)
  maxStorage         Int            @default(-1)
  maxClipsPerVideo   Int            @default(-1)
  maxExportsPerMonth Int            @default(-1)
  hasAiEnhancement   Boolean        @default(true)
  hasScheduling      Boolean        @default(true)
  hasAnalytics       Boolean        @default(true)
  hasTemplates       Boolean        @default(true)
  hasPrioritySupport Boolean        @default(false)
  hasWhiteLabel      Boolean        @default(false)
  hasApiAccess       Boolean        @default(false)
  isPopular          Boolean        @default(false)
  sortOrder          Int            @default(0)
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  billingInterval    String         @default("month")
  features           Json           @default("[]")
  limits             Json           @default("{}")
  stripePriceId      String?
  stripeProductId    String?
  subscriptions      Subscription[]

  @@index([isActive])
  @@index([sortOrder])
}

model PaymentHistory {
  id                    String   @id @default(cuid())
  userId                String
  amount                Decimal
  currency              String   @default("USD")
  status                String
  stripePaymentIntentId String?
  stripeChargeId        String?
  paymentMethod         String?
  description           String?
  invoiceUrl            String?
  receiptUrl            String?
  createdAt             DateTime @default(now())
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Workspace {
  id                 String                @id @default(cuid())
  name               String
  slug               String                @unique
  description        String?
  ownerId            String
  logoUrl            String?
  primaryColor       String?
  secondaryColor     String?
  customDomain       String?               @unique
  isPublic           Boolean               @default(false)
  allowMemberInvites Boolean               @default(true)
  maxMembers         Int                   @default(10)
  subscriptionTier   String                @default("workspace_basic")
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  owner              User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  invitations        WorkspaceInvitation[]
  members            WorkspaceMember[]

  @@index([ownerId])
  @@index([slug])
  @@index([customDomain])
}

model WorkspaceMember {
  id           String    @id @default(cuid())
  workspaceId  String
  userId       String
  role         String    @default("member")
  permissions  String[]  @default([])
  joinedAt     DateTime  @default(now())
  lastActiveAt DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@index([role])
}

model WorkspaceInvitation {
  id          String    @id @default(cuid())
  workspaceId String
  email       String
  role        String    @default("member")
  invitedBy   String
  token       String    @unique
  status      String    @default("pending")
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime  @default(now())
  inviter     User      @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@index([token])
  @@index([status])
  @@index([expiresAt])
}

model SupportTicket {
  id           String            @id @default(cuid())
  ticketNumber String            @unique
  userId       String?
  email        String
  name         String
  subject      String
  description  String
  category     String            @default("general")
  priority     String            @default("medium")
  status       String            @default("open")
  assignedToId String?
  attachments  String[]          @default([])
  browserInfo  String?
  platformInfo String?
  errorDetails Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  resolvedAt   DateTime?
  closedAt     DateTime?
  responses    SupportResponse[]
  assignedTo   Admin?            @relation("AssignedAdmin", fields: [assignedToId], references: [id])
  user         User?             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([category])
  @@index([createdAt])
}

model SupportResponse {
  id          String        @id @default(cuid())
  ticketId    String
  authorId    String?
  authorType  String
  authorName  String
  message     String
  isInternal  Boolean       @default(false)
  attachments String[]      @default([])
  createdAt   DateTime      @default(now())
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([authorType])
  @@index([createdAt])
}

model UserFeedback {
  id            String    @id @default(cuid())
  userId        String?
  rating        Int
  title         String?
  comment       String
  category      String    @default("general")
  page          String?
  screenshot    String?
  isPublic      Boolean   @default(true)
  isApproved    Boolean   @default(false)
  moderatedBy   String?
  moderatedAt   DateTime?
  adminResponse String?
  respondedBy   String?
  respondedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([rating])
  @@index([isPublic, isApproved])
  @@index([category])
  @@index([createdAt])
}

model SystemMetric {
  id         String   @id @default(cuid())
  metricType String
  value      Decimal
  unit       String?
  timestamp  DateTime @default(now())
  period     String   @default("hour")
  metadata   Json?

  @@index([metricType])
  @@index([timestamp])
  @@index([period])
}

model FeatureFlag {
  id               String   @id @default(cuid())
  name             String   @unique
  description      String?
  isEnabled        Boolean  @default(false)
  rolloutPercent   Int      @default(0)
  targetUsers      String[] @default([])
  targetWorkspaces String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([name])
  @@index([isEnabled])
}
